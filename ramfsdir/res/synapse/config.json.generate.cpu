#!/sbin/busybox sh

cat << CTAG
{
    name:CPU,
    elements:[
        { SPane:{
                title:"Device state"
        }},
	{ SDescription:{
		description:""
	}},
        { SLiveLabel:{
                  title:"CPU temperature",
                  description:" Temperature sensor data as read from the A15 cores. The A7 cores do not have dedicated sensors.",
                  refresh:500,
                  action:"echo \$(echo \$(cat /sys/devices/platform/exynos5-tmu/curr_temp | tr , \"\\n\") | { read C0 C1 C2 C3; echo \"Core 0: \${C0%?}째C  Core 1: \${C1%?}째C@nCore 2: \${C2%?}째C  Core 3: \${C3%?}째C\"; })"
        }},
	{ SDescription:{
		description:""
	}},
        { STitleBar:{
                title:"CPUFreq scaling"
        }},
	{ SDescription:{
		description:""
	}},
        { SLiveLabel:{
                  title:"CPU frequency",
                  description:" Current frequency and active cluster.",
                  refresh:500,
                  action:"FREQ=\$(cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq); [[ \$FREQ -lt 651000 ]] && FREQ=\$(expr \$FREQ \\\\* 2) && L=\"\${FREQ%???} MHz (A7)\" || L=\"\${FREQ%???} MHz (A15)\"; echo \$L;"
        }},

	{ SSeekBar:{
       		title:"CPU MAX frequency",
		description:" Set the maximum frequency the CPU scales up to.",
		default:`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq`,
		action:"generic /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq",
		values:{
`
			while read FREQ TIME; do
				if [ $FREQ -lt 651000 ]; then
					LABEL=$(expr $FREQ \* 2)
					LABEL=$(expr $LABEL / 1000)
				else
					LABEL=$(expr $FREQ / 1000)
				fi
				echo "$FREQ:\"${LABEL} MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU MIN frequency",
		description:" Set the minimum frequency the CPU scales down to.",
		default:`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq`,
		action:"generic /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq",
		values:{
`
			while read FREQ TIME; do
				if [ $FREQ -lt 651000 ]; then
					LABEL=$(expr $FREQ \* 2)
					LABEL=$(expr $LABEL / 1000)
				else
					LABEL=$(expr $FREQ / 1000)
				fi
				echo "$FREQ:\"${LABEL} MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SDescription:{
		description:""
	}},
	{ SPane:{
		title:"CPU Multicore Power Saving",
		description:" Try to group tasks into the least cores possible. The higher the value, the more aggressive the grouping. With 0 being highest performance and least power savings and level 2 indicating maximum power savings even at the cost of slight performance degradation.",
	}},
	{ SDescription:{
		description:""
	}},
	{ SDescription:{
		description:" 0 - Performance: No power saving load balance (default)."
	}},
	{ SDescription:{
		description:" 1 - Balanced: Fill one thread/core/package first for long running threads."
	}},
	{ SDescription:{
		description:" 2 - Battery: Also bias task wakeups to semi-idle CPU package for power savings."
	}},
	{ SDescription:{
		description:""
	}},
	{ SSeekBar:{
		title:"sched_mc_power_savings",
		default:`cat /sys/devices/system/cpu/sched_mc_power_savings`,
		action:"generic /sys/devices/system/cpu/sched_mc_power_savings",
		values:{
			`SMCPS='0:"0: Disabled", 1:"1: Enabled", 2:"2: Aggressive"'
			echo $SMCPS`
		}
	}},
	{ SDescription:{
		description:""
	}},
	{ SPane:{
		title:"Ununsed CPU Frequencies:"
	}},
	{ SDescription:{
		description:""
	}},
	{ SLiveLabel:{
		refresh:2500,
		action:"live LiveUnUsed"
	}},
	{ SDescription:{
		description:" "
	}},
    ]
}
CTAG
