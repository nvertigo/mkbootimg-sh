case $1 in
entropy)
  echo "`cat /proc/sys/kernel/random/entropy_avail`";
  ;;
cpu)
  cpu0=$(($(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq) / 1000))MHz
  cpu1=`strings /sys/devices/system/cpu/cpu1/cpufreq/scaling_cur_freq`
  cpu2=`strings /sys/devices/system/cpu/cpu2/cpufreq/scaling_cur_freq`
  cpu3=`strings /sys/devices/system/cpu/cpu3/cpufreq/scaling_cur_freq`
  if [ -z $cpu1 ]
  then
  cpu1=Offline
  else
  cpu1=$(($cpu1 / 1000))MHz
  fi
  if [ -z $cpu2 ]
  then
  cpu2=Offline
  else
  cpu2=$(($cpu2 / 1000))MHz
  fi
  if [ -z $cpu3 ]
  then
  cpu3=Offline
  else
  cpu3=$(($cpu3 / 1000))MHz
  fi
  echo $cpu0 $cpu1 $cpu2 $cpu3
  ;;
gpu)
  echo Current Clock: $(($(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq_gpu)))MHz
  ;;
temp)
  echo Battery: $(($(cat /sys/devices/platform/sec-battery/power_supply/battery/temp) / 10))°C "|" CPU: $(($(cat /sys/class/thermal/thermal_zone0/temp) / 1000))°C
  ;;
cpu_vinfo)
  `
  while read FREQ VOLT; do
                echo Frequency: $(($($FREQ)))MHz "|" Voltage: $(($($VOLT) / 1000))mV
  done < /sys/devices/system/cpu/cpu0/cpufreq/UV_uV_table
  `
  ;;
gpu_vinfo)
  `
  while read FREQ VOLT; do
                echo Frequency: $(($($FREQ)))MHz "|" Voltage: $(($($VOLT) / 1000))mV
  done < /sys/devices/system/cpu/cpu0/cpufreq/GPU_volt_table
  `
  ;;
LiveMemory)
  while read TYPE MEM KB; do
	if [ "$TYPE" = "MemTotal:" ]; then
		TOTAL="$((MEM / 1024)) MB";
	elif [ "$TYPE" = "MemFree:" ]; then
		CACHED=$((MEM / 1024));
	elif [ "$TYPE" = "Cached:" ]; then
		FREE=$((MEM / 1024));
	fi;
  done < /proc/meminfo;
		
  FREE="$((FREE + CACHED)) MB";
  $BB echo "Total: $TOTAL@nFree: $FREE";
;;
LiveUpTime)
  TOTAL=`$BB awk '{ print $1 }' /proc/uptime`;
  AWAKE=$((`$BB awk '{s+=$2} END {print s}' /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state` / 100));
  SLEEP=`$BB awk "BEGIN { print ($TOTAL - $AWAKE) }"`;
		
  PERC_A=`$BB awk "BEGIN { print ( ($AWAKE / $TOTAL) * 100) }"`;
  PERC_A="`$BB printf "%0.1f\n" $PERC_A`%";
  PERC_S=`$BB awk "BEGIN { print ( ($SLEEP / $TOTAL) * 100) }"`;
  PERC_S="`$BB printf "%0.1f\n" $PERC_S`%";
		
  TOTAL=`$BB echo - | $BB awk -v "S=$TOTAL" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}'`;
  AWAKE=`$BB echo - | $BB awk -v "S=$AWAKE" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}'`;
  SLEEP=`$BB echo - | $BB awk -v "S=$SLEEP" '{printf "%dh:%dm:%ds",S/(60*60),S%(60*60)/60,S%60}'`;
  $BB echo "Total: $TOTAL (100.0%)@nSleep: $SLEEP ($PERC_S)@nAwake: $AWAKE ($PERC_A)";
;;
LiveUnUsed)
  UNUSED="";
  while read FREQ TIME; do
	FREQ="$((FREQ / 1000)) MHz";
	if [ $TIME -lt "100" ]; then
		UNUSED="$UNUSED$FREQ, ";
	fi;
  done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state;
		
  UNUSED=${UNUSED%??};
  $BB echo "$UNUSED";
;;
esac
